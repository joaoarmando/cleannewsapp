// Mocks generated by Mockito 5.0.16 from annotations
// in cleannewsapp/test/presentation/pages/home/home_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cleannewsapp/presentation/pages/home/home_presenter.dart'
    as _i3;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeObservableList_0<T> extends _i1.Fake
    implements _i2.ObservableList<T> {}

/// A class which mocks [HomePresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePresenter extends _i1.Mock implements _i3.HomePresenter {
  MockHomePresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  set isLoading(bool? _isLoading) =>
      super.noSuchMethod(Invocation.setter(#isLoading, _isLoading),
          returnValueForMissingStub: null);
  @override
  bool get internetError =>
      (super.noSuchMethod(Invocation.getter(#internetError), returnValue: false)
          as bool);
  @override
  set internetError(bool? _internetError) =>
      super.noSuchMethod(Invocation.setter(#internetError, _internetError),
          returnValueForMissingStub: null);
  @override
  bool get unexpectedError => (super
          .noSuchMethod(Invocation.getter(#unexpectedError), returnValue: false)
      as bool);
  @override
  set unexpectedError(bool? _unexpectedError) =>
      super.noSuchMethod(Invocation.setter(#unexpectedError, _unexpectedError),
          returnValueForMissingStub: null);
  @override
  _i2.ObservableList<dynamic> get newsList =>
      (super.noSuchMethod(Invocation.getter(#newsList),
              returnValue: _FakeObservableList_0<dynamic>())
          as _i2.ObservableList<dynamic>);
  @override
  set newsList(_i2.ObservableList<dynamic>? _newsList) =>
      super.noSuchMethod(Invocation.setter(#newsList, _newsList),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> getNewsByCountry() =>
      (super.noSuchMethod(Invocation.method(#getNewsByCountry, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setNewsCountry(String? country) =>
      super.noSuchMethod(Invocation.method(#setNewsCountry, [country]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
